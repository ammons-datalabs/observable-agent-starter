"""CLI for the ADL coding agent."""

import argparse
import os
import sys
import pathlib
import subprocess
from adl_agent.harness import make_patch_and_test, run_command
from adl_agent.agent import CodeAgent
import dspy


def setup_dspy():
    """Configure DSPy with the appropriate LLM."""
    model = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

    if not os.getenv("OPENAI_API_KEY"):
        print("⚠️  Warning: OPENAI_API_KEY not set. Agent may fail.")

    lm = dspy.LM(model)
    dspy.configure(lm=lm)


def main():
    parser = argparse.ArgumentParser(
        "adl-agent",
        description="Autonomous coding agent with DSPy + Langfuse"
    )
    parser.add_argument("task", help="Engineering task description")
    parser.add_argument("--repo", required=True, help="Path to target repository")
    parser.add_argument(
        "--allow",
        nargs="+",
        default=["src/**/*.py", "tests/**/*.py"],
        help="Glob patterns for allowed files"
    )
    parser.add_argument("--branch-prefix", default="agent", help="Branch name prefix")
    parser.add_argument("--dry-run", action="store_true", help="Generate patch but don't apply")
    parser.add_argument("--open-pr", action="store_true", help="Open PR (requires gh CLI)")
    args = parser.parse_args()

    repo = pathlib.Path(args.repo).resolve()

    if not repo.exists() or not (repo / ".git").exists():
        print(f"❌ Error: {repo} is not a git repository")
        sys.exit(1)

    # Setup DSPy
    setup_dspy()

    # Create branch
    branch = f"{args.branch_prefix}/{args.task.replace(' ', '-').lower()[:50]}"
    print(f"🌿 Creating branch: {branch}")

    try:
        run_command(["git", "checkout", "-b", branch], cwd=str(repo))
    except subprocess.CalledProcessError as e:
        print(f"⚠️  Branch may already exist or git error: {e}")

    # Initialize agent
    agent = CodeAgent()

    # Generate and test patch
    print(f"🤖 Agent working on task: {args.task}")
    print(f"📁 Repository: {repo}")
    print(f"📋 Allowed patterns: {args.allow}")
    print()

    patch, tests_passed, output = make_patch_and_test(
        task=args.task,
        repo_path=str(repo),
        allow_globs=args.allow,
        agent=agent,
        dry_run=args.dry_run
    )

    print(output)
    print()

    if not patch:
        print("❌ No patch generated. Check logs.")
        sys.exit(2)

    if args.dry_run:
        print("✅ Dry run complete. Patch:")
        print(patch[:500] + "..." if len(patch) > 500 else patch)
        sys.exit(0)

    # Commit if tests passed
    if tests_passed:
        print("✅ Tests passed! Creating commit...")
        try:
            run_command(["git", "add", "-A"], cwd=str(repo))
            commit_msg = f"agent: {args.task}\n\n🤖 Generated by ADL Coding Agent"
            run_command(["git", "commit", "-m", commit_msg], cwd=str(repo))
            print(f"✅ Commit created on branch: {branch}")

            if args.open_pr:
                print("🚀 Opening PR...")
                # Ensure label exists
                try:
                    run_command(
                        ["gh", "label", "create", "agent-generated", "--color", "E99695"],
                        cwd=str(repo),
                        check=False
                    )
                except Exception:
                    pass  # Label may already exist

                # Push branch
                run_command(["git", "push", "-u", "origin", branch], cwd=str(repo))

                # Create PR
                run_command(
                    ["gh", "pr", "create", "--fill", "--label", "agent-generated"],
                    cwd=str(repo)
                )
                print("✅ PR opened successfully!")
        except subprocess.CalledProcessError as e:
            print(f"❌ Git operation failed: {e}")
            sys.exit(1)
    else:
        print("❌ Tests failed. Branch left for manual review.")
        print(f"   Run: cd {repo} && git diff")
        sys.exit(1)


if __name__ == "__main__":
    main()
